C++
Listas
Estrutura: std::list (lista duplamente encadeada), std::vector (lista linear dinâmica)

Biblioteca: <list>, <vector>

Funções/comandos comuns:

push_back(), push_front()

pop_back(), pop_front()

insert(), erase()

begin(), end(), size()


Pilhas (Stacks)
Estrutura: std::stack

Biblioteca: <stack>

Funções/comandos comuns:

push() – insere no topo

pop() – remove do topo

top() – acessa o topo

empty() – verifica se está vazia

size() – tamanho da pilha


Filas (Queues)
Estrutura: std::queue (FIFO), std::deque (fila dupla), std::priority_queue

Biblioteca: <queue>, <deque>

Funções/comandos comuns:

push() – adiciona ao final

pop() – remove da frente

front() – acessa o primeiro

back() – acessa o último

empty(), size()




Python
Listas
Estrutura: list (nativa)

Funções/comandos comuns:

append(), insert(), extend()

pop(), remove()

len(), index(), count()

Fatiamento: lst[1:3], lst[::-1]


Pilhas (Stacks)
Estrutura recomendada: usar list ou collections.deque

Funções/comandos comuns:

list.append() – push

list.pop() – pop

deque.append() / deque.pop() – mais eficiente


Filas (Queues)
Estruturas possíveis:

collections.deque – fila simples e dupla

queue.Queue – fila segura para threads

multiprocessing.Queue – fila entre processos

Funções/comandos comuns:

append(), popleft() – em deque

put(), get() – em queue.Queue



MatLab
 Listas
MATLAB não tem listas como estrutura nativa.

Pode-se simular com:

Cell arrays: list = {1, 2, 'a'};

Arrays dinâmicos: list = [list, new_element];


Sem suporte direto, mas pode-se usar vetores:

stack(end+1) = value; → push

value = stack(end); stack(end) = []; → pop

Pode-se criar Stack com handle class


Filas
Também simulável com vetores ou cell arrays:

queue(end+1) = value; → enqueue

value = queue(1); queue(1) = []; → dequeue

Ou com classe Queue em OO (semelhante ao exemplo de Stack).

